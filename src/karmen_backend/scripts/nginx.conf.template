user www-data;
worker_processes auto;
pid /run/nginx.pid;

env REDIS_HOST;
env REDIS_PORT;

events {
    worker_connections 1024;
    use epoll;
    multi_accept on;
}

http {
  access_log /dev/stdout;
  error_log /dev/stdout;
  sendfile            on;
  tcp_nopush          on;
  tcp_nodelay         on;
  keepalive_timeout   65;
  types_hash_max_size 2048;

  include             mime.types;
  default_type        application/octet-stream;
  client_max_body_size 256M;

  server {
    listen       ${SERVICE_PORT} default_server;
    listen       [::]:${SERVICE_PORT} default_server;
    resolver     127.0.0.11 valid=5m;
    server_name  localhost;

    location ~ ^/proxied-webcam/(.*) {
      set $upstream "";
      set $key $1;
      # kudos to https://sosedoff.com/2012/06/11/dynamic-nginx-upstreams-with-lua-and-redis.html

      rewrite_by_lua '
        local redis  = require "resty.redis"
        local red = redis:new()
        local ok, err = red:connect(os.getenv("REDIS_HOST"), os.getenv("REDIS_PORT"))
        -- connection failed
        if not ok then
          ngx.log(ngx.ALERT, "failed to connect: ", err)
          ngx.exit(ngx.HTTP_NOT_FOUND)
        end
        route, err = red:get("webcam_" .. ngx.var.key)
        -- lookup failed
        if not route then
          ngx.exit(ngx.HTTP_NOT_FOUND)
        end
        -- lookup was empty
        if route == ngx.null then
          ngx.exit(ngx.HTTP_NOT_FOUND)
        end

        ngx.var.upstream = route
      ';

      proxy_buffering             off;
      proxy_set_header            Host $host;
      proxy_set_header            X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_redirect              off;
      proxy_connect_timeout       10;
      proxy_send_timeout          30;
      proxy_read_timeout          30;
      proxy_pass                  $upstream;
    }

    location / {
        try_files \$uri @app;
    }
    location @app {
        uwsgi_read_timeout 1h;
        uwsgi_send_timeout 1h;
        proxy_send_timeout 1h;
        proxy_read_timeout 1h;
        include uwsgi_params;
        uwsgi_pass unix:///tmp/uwsgi.sock;
    }
  }
}
